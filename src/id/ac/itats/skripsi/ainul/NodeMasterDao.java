package id.ac.itats.skripsi.ainul;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import id.ac.itats.skripsi.ainul.NodeMaster;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Node_Master.
*/
public class NodeMasterDao extends AbstractDao<NodeMaster, Long> {

    public static final String TABLENAME = "Node_Master";

    /**
     * Properties of entity NodeMaster.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdNode = new Property(0, Long.class, "idNode", true, "Id_Node");
        public final static Property IdNodePeta = new Property(1, String.class, "idNodePeta", false, "Id_Node_Peta");
        public final static Property Latitude = new Property(2, String.class, "latitude", false, "Latitude");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "Longitude");
    };


    public NodeMasterDao(DaoConfig config) {
        super(config);
    }
    
    public NodeMasterDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Node_Master' (" + //
                "'Id_Node' INTEGER PRIMARY KEY ," + // 0: idNode
                "'Id_Node_Peta' TEXT," + // 1: idNodePeta
                "'Latitude' TEXT," + // 2: latitude
                "'Longitude' TEXT);"); // 3: longitude
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_Node_Master_Id_Node ON Node_Master" +
                " (Id_Node);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Node_Master'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NodeMaster entity) {
        stmt.clearBindings();
 
        Long idNode = entity.getIdNode();
        if (idNode != null) {
            stmt.bindLong(1, idNode);
        }
 
        String idNodePeta = entity.getIdNodePeta();
        if (idNodePeta != null) {
            stmt.bindString(2, idNodePeta);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(3, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NodeMaster readEntity(Cursor cursor, int offset) {
        NodeMaster entity = new NodeMaster( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idNode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idNodePeta
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // longitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NodeMaster entity, int offset) {
        entity.setIdNode(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdNodePeta(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NodeMaster entity, long rowId) {
        entity.setIdNode(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NodeMaster entity) {
        if(entity != null) {
            return entity.getIdNode();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
