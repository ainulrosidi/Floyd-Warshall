package id.ac.itats.skripsi.ainul;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import id.ac.itats.skripsi.ainul.SatuArah1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Satu_Arah1.
*/
public class SatuArah1Dao extends AbstractDao<SatuArah1, Long> {

    public static final String TABLENAME = "Satu_Arah1";

    /**
     * Properties of entity SatuArah1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdSatuArah = new Property(0, Long.class, "idSatuArah", true, "Id_Satu_Arah");
        public final static Property SatuArah = new Property(1, String.class, "satuArah", false, "Satu_Arah");
        public final static Property IdNodePeta = new Property(2, String.class, "idNodePeta", false, "Id_Node_Peta");
        public final static Property Latitude = new Property(3, String.class, "latitude", false, "Latitude");
        public final static Property Longitude = new Property(4, String.class, "longitude", false, "Longitude");
        public final static Property NamaJalan = new Property(5, String.class, "namaJalan", false, "Nama_Jalan");
    };


    public SatuArah1Dao(DaoConfig config) {
        super(config);
    }
    
    public SatuArah1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Satu_Arah1' (" + //
                "'Id_Satu_Arah' INTEGER PRIMARY KEY ," + // 0: idSatuArah
                "'Satu_Arah' TEXT," + // 1: satuArah
                "'Id_Node_Peta' TEXT," + // 2: idNodePeta
                "'Latitude' TEXT," + // 3: latitude
                "'Longitude' TEXT," + // 4: longitude
                "'Nama_Jalan' TEXT);"); // 5: namaJalan
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_Satu_Arah1_Id_Satu_Arah ON Satu_Arah1" +
                " (Id_Satu_Arah);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Satu_Arah1'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SatuArah1 entity) {
        stmt.clearBindings();
 
        Long idSatuArah = entity.getIdSatuArah();
        if (idSatuArah != null) {
            stmt.bindLong(1, idSatuArah);
        }
 
        String satuArah = entity.getSatuArah();
        if (satuArah != null) {
            stmt.bindString(2, satuArah);
        }
 
        String idNodePeta = entity.getIdNodePeta();
        if (idNodePeta != null) {
            stmt.bindString(3, idNodePeta);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(4, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(5, longitude);
        }
 
        String namaJalan = entity.getNamaJalan();
        if (namaJalan != null) {
            stmt.bindString(6, namaJalan);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SatuArah1 readEntity(Cursor cursor, int offset) {
        SatuArah1 entity = new SatuArah1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idSatuArah
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // satuArah
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idNodePeta
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // latitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // longitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // namaJalan
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SatuArah1 entity, int offset) {
        entity.setIdSatuArah(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSatuArah(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdNodePeta(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLongitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNamaJalan(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SatuArah1 entity, long rowId) {
        entity.setIdSatuArah(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SatuArah1 entity) {
        if(entity != null) {
            return entity.getIdSatuArah();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
